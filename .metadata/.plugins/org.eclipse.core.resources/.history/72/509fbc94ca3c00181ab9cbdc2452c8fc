package Dados;
import Dado;

/**
 * Essa é uma classe auxiliar que permite gerencia um conjunto de vários dados simultaneamente. 
 * Operações como rolar alguns dos dados ou exibir o resultado de todos eles, são implementadas.
 */
public class RolaDados {
	
	private int[] result;
	private Dado[] dados;
	
	/**
	 * Construtor que cria e armazena vários objetos do tipo Dado. Usa para isso o construtor padrão daquela classe, 
	 * ou seja, um dado de 6 lados e gerando sempre uma semente aleatória para o gerador de números aleatórios. 
	 * Os dados criados podem ser referenciados por números, entre 1 e n.
	 */
	public RolaDados() {
		result = new int[5];
		dados = new Dado[5];
		
		for (int i = 0; i < dados.length; i++) {
			dados[i] = new Dado();
		} 
	}
	
	/**
	 * Rola todos os dados.
	 * @return Retorna o valor de cada um dos dados, inclusive os que não foram rolados. Nesse caso, o valor retornado 
	 * é o valor anterior que ele já possuia.
	 */
	public int[] rolar() {
	
		for (int i = 0; i < result.length; i++) {
			result[i] = dados[i].rolar();
			//System.out.println(result[i]);
		}
		//System.out.println("");
		
		
		return result;
	}
	
	/**
	 * Rola alguns dos dados.
	 * @param quais - É um array de booleanos que indica quais dados devem ser rolados. Cada posição representa um dos dados. 
	 * Ou seja, a posição 0 do array indica se o dado 1 deve ser rolado ou não, e assim por diante.
	 * @return Retorna o valor de cada um dos dados, inclusive os que não foram rolados. Nesse caso, o valor retornado é o valor
	 *  anterior que ele já possuia.
	 */
	public int[] rolar(boolean[] quais){
		
		for (int i = 0; i < result.length; i++) {
			if(quais[i]) {
				result[i] = dados[i].rolar();
			}
		}
		
		return result;  
	}
	
	/**
	 * Rola alguns dos dados.
	 * @param s - É um String que possui o número dos dados a serem rolados. Por exemplo "1 4 5" indica que os dados 
	 * 1 4 e cinco devem ser rolados. Os números devem ser separados por espaços. Se o valor passado no string estiver 
	 * fora do intervalo válido, ele é ignorado simplesmente.
	 * @return Retorna o valor de cada um dos dados, inclusive os que não foram rolados. Nesse caso, o valor retornado
	 *  é o valor anterior que ele já possuia.
	 */
	public int[] rolar(java.lang.String s) {
		
		String[] aux = new String[5];
		for (int i = 0; i < aux.length; i++) {
			aux = s.split(" ");
		}
		
		for (int i = 0; i < aux.length; i++) {
			result[Integer.parseInt(aux[i]) - 1] = dados[Integer.parseInt(aux[i]) - 1].rolar();
		}		
		
		return result;
	}
	
	/**
	 * Usa a representação em string do dados, para mostrar o valor de todos os dados do conjunto. 
	 * Exibe os dados horizontalmente, por exemplo:
		 1          2          3          4          5
		+-----+    +-----+    +-----+    +-----+    +-----+    
		|*   *|    |     |    |*    |    |*    |    |*   *|    
		|  *  |    |  *  |    |     |    |  *  |    |     |    
		|*   *|    |     |    |    *|    |    *|    |*   *|    
		+-----+    +-----+    +-----+    +-----+    +-----+    
	 */
	public java.lang.String toString(){
		
		String s = "";
		String[][] linhas = new String[5][5];
		
		for(int i = 0; i < dados.length; i++){
			s = dados[i].toString();
			linhas[i] = s.split("\n");
		}
		
		s =  "1          2          3          4          5\n";
		
		for(int i = 0; i < 5 ;i++) {
			for(int j = 0; j < 5 ;j++) {
				s += linhas[j][i];
			}
			s += '\n';
		}
		
		return s;
	}
}
